plugins {
    id 'com.android.library'
    id 'de.marcphilipp.nexus-publish'
    id 'kotlin-android'
    id 'signing'
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion '30.0.2'

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName

        consumerProguardFiles 'proguard.pro'
    }

    testOptions.unitTests {
        returnDefaultValues true
        includeAndroidResources true
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.kotlinVersion}"
    compileOnly 'com.samsung.android.spay:sdk:2.5.01'

    implementation 'androidx.annotation:annotation:1.0.1'
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha01'
    implementation 'com.braintreepayments.api:braintree:3.14.1'

    testImplementation 'androidx.test:rules:1.1.1'
    testImplementation 'androidx.test:runner:1.1.1'
    testImplementation 'com.google.android.gms:play-services-wallet:16.0.1'
    testImplementation 'com.samsung.android.spay:sdk:2.5.01'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.4'
    testImplementation 'org.powermock:powermock-classloading-xstream:1.7.4'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.4'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.7.4'
    testImplementation 'org.robolectric:robolectric:4.1'
}

// region signing and publishing

task javadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    archiveClassifier.set('javadoc')
    from javadocs.destinationDir
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

signing {
    required {
        !version.endsWith("SNAPSHOT") && !version.endsWith("DEVELOPMENT")
    }
    sign publishing.publications
}

nexusPublishing {
    // give nexus sonatype more time to initialize the staging repository
    clientTimeout = Duration.ofMinutes(3)
    repositories {
        sonatype()
    }
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                artifact sourcesJar
                artifact javadocsJar

                groupId = 'com.braintreepayments.api'
                artifactId = 'samsung-pay'
                version = rootProject.versionName

                pom {
                    name = 'samsung-pay'
                    packaging = 'aar'
                    description = 'Samsung Pay Module for Braintree\'s Android SDK.'
                    url = 'https://github.com/braintree/braintree-android-samsung-pay'

                    scm {
                        url = 'scm:git@github.com:braintree/braintree-android-samsung-pay.git'
                        connection = 'scm:git@github.com:braintree/braintree-android-samsung-pay.git'
                        developerConnection = 'scm:git@github.com:braintree/braintree-android-samsung-pay.git'
                    }

                    developers {
                        developer {
                            id = 'devs'
                            name = 'Braintree Payments'
                        }
                    }

                    licenses {
                        license {
                            name = 'MIT'
                            url = 'http://opensource.org/licenses/MIT'
                            distribution = 'repo'
                        }
                    }
                }
            }
        }
    }
}

// endregion

